package graphs;
import java.util.*;


public class BFS {
	private boolean []visited;
	private GraphBFS graph;
	public BFS(int V){
		graph = new GraphBFS(V);
		visited = new boolean[V];
	}
	
	public void printBFS(int s){
		LinkedList<Integer> queue = new LinkedList<Integer>();
		LinkedList<Integer> adj[] = graph.getAdjList();
		queue.add(s);
		while(!queue.isEmpty()){
			int node = queue.poll();
			visited[node] = true;
			System.out.println(node+" ");
			Iterator<Integer> itr = adj[node].listIterator();
			while(itr.hasNext())
			{
				int adjNode = itr.next();
				if(!visited[adjNode]){
					queue.push(adjNode);
				}
			}
		}
	}
	
	public Graph getBSFGraph(){
		return graph;
	}
	
	public static void main(String args[])
	{
		BFS bfs = new BFS(4);
		
	}
}

class GraphBFS{
private int V;
private LinkedList<Integer> []adj;

public GraphBFS(int V){
	this.V = V;
	adj = (LinkedList<Integer>[]) new LinkedList[V];
}

public void addEdge(int v, int w){
	adj[v].push(w);
}

public LinkedList<Integer>[] getAdjList(){
	return adj;
}
}