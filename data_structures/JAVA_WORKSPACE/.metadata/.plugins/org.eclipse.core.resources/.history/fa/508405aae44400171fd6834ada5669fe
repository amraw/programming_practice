package graphs;
import java.util.*;
public class DFSIterative {
public int N;
public LinkedList<Integer> adjList[];
public DFSIterative(int N){
	this.N = N;
	adjList = (LinkedList<Integer>[]) new LinkedList[N];
	for(int i=0; i<N; i++)
		adjList[i]= new LinkedList<Integer>();
}

public void addEdge(int x, int y)
{
	adjList[x].add(y);
}

public void DFSIterativeSolution()
{
	boolean visited[] = new boolean[N];
	Arrays.fill(visited, false);
	Stack<Integer> stk = new Stack<Integer>();
	for(int i=0; i<N; i++)
	{
		if(!visited[i])
		{
			visited[i]=true;
			
		}
	}
}


}
