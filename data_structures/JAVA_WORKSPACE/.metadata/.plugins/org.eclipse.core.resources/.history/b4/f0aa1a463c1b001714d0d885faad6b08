package graphs;

import java.util.*;

public class CycleDirectGraph {
	
	private int V;
	private LinkedList<Integer> adj[];
	
	public CycleDirectGraph(int V){
		this.V = V;
		adj = (LinkedList<Integer>[]) new LinkedList[V];
		for(int i=0; i< V; i++)
		{
			adj[i] = new LinkedList<Integer>();
		}
	}
	
	public void addEdge(int v, int w){
		adj[v].add(w);
	}
	
	public boolean DetetCycleUtil(int node, boolean visited[], boolean recurStack[])
	{
		if(!visited[node]){
			visited[node] = true;
			recurStack[node]=true;
			Iterator<Integer> itr = adj[node].listIterator();
			while(itr.hasNext()){
				int next = itr.next();
				if(!visited[next] && DetetCycleUtil(next,visited,recurStack))
					return true;
				if(recurStack[next])
					return true;
			}
		}
		recurStack[node] = false;
		return false;
	}
	
	public boolean DetectCycle(){
		
		
		return false;
	}

}
